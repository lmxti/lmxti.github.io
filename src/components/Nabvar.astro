---
interface NavItem {
  label: string;
  href: string;
  icon: string;
}

const navItems: NavItem[] = [
  {
    label: "Inicio",
    href: "#hero",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V9.48907C3 9.18048 3.14247 8.88917 3.38606 8.69972L11.3861 2.47749C11.7472 2.19663 12.2528 2.19663 12.6139 2.47749L20.6139 8.69972C20.8575 8.88917 21 9.18048 21 9.48907V20ZM19 19V9.97815L12 4.53371L5 9.97815V19H19Z"></path></svg>`
  },
  {
    label: "Sobre mí",
    href: "#about",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"/></svg>`
  },
  {
    label: "Proyectos",
    href: "#proyectos",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M4 5V19H20V7H11.5858L9.58579 5H4ZM12.4142 5H21C21.5523 5 22 5.44772 22 6V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H10.4142L12.4142 5Z"></path></svg>`
  },
];
---

<nav id="main-nav" class="fixed left-1/2 -translate-x-1/2 z-50 bg-[var(--background)] border border-transparent backdrop-blur-xl transition-all duration-500 ease-in-out md:top-6 md:bottom-auto bottom-0 w-[80%] rounded-xl md:rounded-full">
  <div class="container mx-auto flex justify-center items-center p-3">
    <ul class="flex w-full justify-between md:justify-center md:gap-12 gap-6">
      {navItems.map(item => (
        <li class="flex-1 md:flex-none">
          <a href={item.href} class="nav-link flex flex-col md:flex-row items-center gap-1 md:gap-2 text-[var(--white-icon)] transition-colors text-xs md:text-base relative group py-2 md:py-1" >
            <div class="absolute -left-6 top-1/2 -translate-y-1/2 w-2 h-2 rounded-full transition-all duration-300 scale-0 opacity-0 bg-[#5bd9ff] nav-indicator hidden md:block"></div>
            
            <!-- Ícono - siempre visible -->
            <div class="md:hidden nav-icon text-white transition-colors" set:html={item.icon}></div>
            
            <!-- Texto - solo en desktop -->
            <span class="hidden md:inline-block text-white transition-colors">{item.label}</span>
          </a>
        </li>
      ))}
    </ul>
  </div>
</nav>

<script type="module">
const nav = document.getElementById('main-nav');
const maxScroll = 1000;
let rafId = null;

function updateNav() {
  if (window.scrollY > 0) {
    nav?.classList.add('scrolling');
    const scrollProgress = Math.min(window.scrollY / maxScroll, 1);
    const easeProgress = 1 - Math.pow(1 - scrollProgress, 4);
    const minWidth = 528;
    const maxWidth = window.innerWidth * 0.8;
    const currentWidth = maxWidth - (maxWidth - minWidth) * easeProgress;
    if (window.innerWidth >= 768) nav?.style.setProperty('width', `${currentWidth}px`);
  } else {
    nav?.classList.remove('scrolling');
    nav?.style.setProperty('width', '80%');
  }
  rafId = null;
}

window.addEventListener('scroll', () => {
  if (!rafId) rafId = requestAnimationFrame(updateNav);
}, { passive: true });

// Scroll suave mejorado
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', e => {
    e.preventDefault();
    const href = anchor.getAttribute('href');
    const target = document.querySelector(href);
    
    if (target) {
      // Calcular offset para el navbar fijo
      const navHeight = nav ? nav.offsetHeight : 0;
      const targetPosition = target.offsetTop - navHeight - 20;
      
      window.scrollTo({
        top: targetPosition,
        behavior: 'smooth'
      });
    }
  });
});

// Scroll activo
document.addEventListener('DOMContentLoaded', () => {
  const sections = document.querySelectorAll('section[id]');
  const navLinks = document.querySelectorAll('nav a[href^="#"]');
  const observerOptions = { 
    threshold: 0.3,
    rootMargin: '-100px 0px -50% 0px'
  };
  
  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        navLinks.forEach(link => link.classList.remove('active'));
        const activeLink = document.querySelector(`nav a[href="#${entry.target.id}"]`);
        activeLink?.classList.add('active');
      }
    });
  }, observerOptions);
  
  sections.forEach(section => observer.observe(section));
});
</script>

<style>
nav.scrolling {
  background-color: var(--component-bg);
  border-color: #ffffff10;
}

nav a.active .nav-indicator {
  transform: translateY(-50%) scale(1);
  opacity: 1;
}

nav a.active {
  color: white !important;
}

nav a.active .nav-icon {
  color: #5bd9ff !important;
}

/* Efectos hover */
nav a:hover .nav-icon {
  color: #5bd9ff;
  transform: scale(1.1);
}

nav a:hover span {
  color: #5bd9ff;
}

/* Transiciones suaves */
.nav-icon {
  transition: all 0.3s ease;
}

.nav-icon svg {
  transition: transform 0.3s ease;
}

/* Vista móvil */
@media (max-width: 767px) {
  body { 
    padding-bottom: 0; 
  }
  
  nav { 
    width: 100% !important; 
    border-radius: 1rem; 
    top: 1.5rem; 
    bottom: auto;
  } 
  
  nav.scrolling { 
    border-radius: 1rem; 
  }
  
  /* En móvil, los enlaces son más grandes para facilitar el toque */
  .nav-link {
    min-height: 44px;
    justify-content: center;
  }
  
  /* Íconos un poco más grandes en móvil */
  .nav-icon svg {
    width: 24px;
    height: 24px;
  }
}

/* Vista desktop */
@media (min-width: 768px) {
  .nav-icon svg {
    width: 20px;
    height: 20px;
  }
}
</style>